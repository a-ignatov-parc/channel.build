module CaffeineLabs
  module ChannelCli
    class Chan < Thor
      # TODO: Consider to move config to YAML file.
      @@config = OpenStruct.new(
        ###
        # Common settings.
        ###

        # URL for the Channel REST API. Value of $CHAN_API_URL has higher priority.
        :api_url => ENV['CHAN_API_URL'] || 'http://channel.build/api/',

        # Default name of manifest file inside of a channel recipe.
        # The manifest file contains channel's settings such as app name,
        # URL for TVML/TVJS code, URL for the Channel REST API, etc.
        :manifest_basename => 'manifest.plist',

        # Assets directory name inside of a channel recipe.
        # The directory contains any assets needed by the channel such as
        # app icons.
        :assets_dirname => 'assets',

        # A channel recipe is a ZIP archive. But a special extension
        # may be specified in order to distinguish recipes from ZIP archives.
        :recipe_extname => '.chr',

        # Names for icons in assets directory of a channel recipe.
        :icon_small_basename => 'icon-small.png',
        :icon_large_basename => 'icon-large.png',
        :icon_topshelf_basename => 'icon-topshelf.png',

        # Resolutions for icons in assets directory of a channel recipe.
        :icon_small_size => '400x240',
        :icon_large_size => '1280x768',
        :icon_topshelf_size => '1920x720',

        # Default properties for manifest file of a channel recipe.
        :manifest_properties => {
          'Recipe Version' => '1.0',
          'Organization Name' => 'CaffeineLabs',
          'Organization Identifier' => 'com.caffeinelabs'
        },

        # Default settings for generated Xcode project for a channel app.
        :project_settings => OpenStruct.new(
          # URL of TVML/TVJS code used by the app.
          # Two URLs for Xcode's development & staging build schemes respectively.
          # %N part of the URL is replaced with version number of the app.
          # The version number is fetched from the Channel REST API for particular app.
          :local_tvjs_client_url => 'http://localhost:3000/tvos/v%N/',
          :tvjs_client_url => 'http://channel.build/tvos/v%N/',

          # Path of URL to the JavaScript app code. Appended to TVML/TVJS code URL.
          :tvjs_app_path => 'tvjs/app.js',

          # URL for the Channel REST API used by the app.
          :web_api_url => 'http://channel.build/api/'
        ),

        ###
        # Commands specific settings.
        ###

        # chan create
        :create => OpenStruct.new(
          # Output path of a channel recipe.
          :output_path => Dir.getwd
        ),

        # chan generate
        :generate => OpenStruct.new(
          # Output path of a directory with channel's Xcode project.
          :output_path => Dir.getwd,

          # Path to the Xcode project which is used as a template
          # to generate channel's Xcode project. Value of $CHAN_PROJECT_DIR has higher priority.
          :channel_project_path => ENV['CHAN_PROJECT_DIR'] || "#{ENV['HOME']}/Projects/channel.build/src/channel.build.tvos",

          # Name of the template Xcode project.
          :channel_project_name => 'channel',

          # Wildcard for project files to be renamed
          # during template Xcode project renaming step.
          :project_files_to_rename_pattern => '**/{*.swift,*.plist,*.pbxproj,*.xcscheme,*.xcworkspacedata}',

          # Template Xcode project assets relative path.
          :channel_project_assets_path => 'Assets.xcassets/App Icon & Top Shelf Image.brandassets'
        ),

        # chan import
        :import => OpenStruct.new(
          # URL for YouTube videos used by youtube-dl command-line tool.
          :youtube_video_url => "https://www.youtube.com/watch\?v\=",

          # youtube-dl may simulate command instead of running it.
          # It is used to get the filename generated by youtube-dl.
          :simulate_youtube_dl_command => "youtube-dl -s --get-filename -ciw --restrict-filenames --recode-video mp4 -o #{Dir.tmpdir}/%\\(title\\)s-%\\(id\\)s.%\\(ext\\)s",

          # Actual youtube-dl command used to download videos for a channel in Amazon S3 bucket.
          :youtube_dl_command => "youtube-dl -ciw --restrict-filenames --recode-video mp4 -o #{Dir.tmpdir}/%\\(title\\)s-%\\(id\\)s.%\\(ext\\)s",

          # AWS S3 settings. This is the S3 storage in which channel's videos should be downloaded.
          # $CHAN_AWS_BUCKET, $CHAN_AWS_REGION, $CHAN_AWS_ACCESS_KEY_ID, $CHAN_AWS_SECRET_ACCESS_KEY
          # environment variables must be set in order to use import command.
          :aws_bucket => ENV['CHAN_AWS_BUCKET'] || '',
          :aws_region => ENV['CHAN_AWS_REGION'] || '',
          :aws_access_key_id => ENV['CHAN_AWS_ACCESS_KEY_ID'] || '',
          :aws_secret_access_key => ENV['CHAN_AWS_SECRET_ACCESS_KEY'] || ''
        )
      )

      def self.config
        @@config
      end
    end
  end
end
